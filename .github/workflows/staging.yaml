name: "Deploy to Staging"

on:
  push:
    branches:
      - "release"

  workflow_dispatch:

jobs:
  deployment:
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

        
      - name: Create getImage zip
        run: |
          cd src/api/getImage
          zip getImage.zip ./*
      
      - name: Create processImage zip
        run: |
          cd src/api/processImage
          zip processImage.zip ./*

      - name: Create greyscale zip
        run: |
          cd src/api/Greyscale/
          pip install -r requirements.txt -t ./
          zip -r Greyscale.zip ./*

      - name: Provision infrastructure
        run: |
          cd src/terraform
          terraform init
          terraform apply -auto-approve

      - name: Create app image
        run: |
          ECR_URL=$(cd src/terraform && terraform output -raw ecr_url)
          VERSION=$(cat src/app/version.txt)
          docker build -t $ECR_URL:$VERSION src/app
          
      
      - name: Push image
        run: |
          ECR_URL=$(cd src/terraform && terraform output -raw ecr_url)
          VERSION=$(cat src/app/version.txt)
          REGION=$(cd src/terraform && terraform output -raw region)
          aws ecr get-login-password --region $REGION | docker login \
          --username AWS \
          --password-stdin $ECR_URL
          docker push $ECR_URL:$VERSION
      
      - name: Deploy app to K8
        run: |
          ECR_URL=$(cd src/terraform && terraform output -raw ecr_url)
          VERSION=$(cat src/app/version.txt)
          REGION=$(cd src/terraform && terraform output -raw region)
          export API_URL=$(cd src/terraform && terraform output -raw api_url)
          export NAME=$(cd src/terraform && terraform output -raw eks_cluster_name)
          export IMAGE="$ECR_URL:$VERSION"
          export ENV=staging
          aws eks update-kubeconfig --region $REGION --name $NAME
          cat src/app/deployment.yaml | envsubst | kubectl apply -f -
      
      - name: Get LoadBalancer URL
        run: kubectl get service vividarts --output jsonpath='{.status.loadBalancer.ingress[0].hostname}' -n staging


